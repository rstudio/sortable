[{"path":"https://rstudio.github.io/sortable/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Andrie de Vries Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rstudio.github.io/sortable/articles/built_in.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using rank list and bucket lists in Shiny apps","text":"Although sortable designed low-level wrapper around SortableJS library, package also exposes higher level functions. functions enable easily using drag--drop widgets Shiny app specific tasks: create ranking task, use rank_list() create bucketing task, use bucket_list()","code":""},{"path":[]},{"path":"https://rstudio.github.io/sortable/articles/built_in.html","id":"demo","dir":"Articles","previous_headings":"Rank list","what":"Demo","title":"Using rank list and bucket lists in Shiny apps","text":"rank list app, allowing change order items list. app demonstrates three types drag--drop behaviour: Default Multi-drag, select multiple items drag group Swap, swap two items","code":""},{"path":"https://rstudio.github.io/sortable/articles/built_in.html","id":"source-code","dir":"Articles","previous_headings":"Rank list","what":"Source code","title":"Using rank list and bucket lists in Shiny apps","text":"source code:","code":"## Example shiny app with rank list  library(shiny) library(sortable)  labels <- list(   \"one\",   \"two\",   \"three\",   htmltools::tags$div(     htmltools::em(\"Complex\"), \" html tag without a name\"   ),   \"five\" = htmltools::tags$div(     htmltools::em(\"Complex\"), \" html tag with name: 'five'\"   ) )  rank_list_basic <- rank_list(   text = \"Drag the items in any desired order\",   labels = labels,   input_id = \"rank_list_basic\" )  rank_list_swap <- rank_list(   text = \"Notice that dragging causes items to swap\",   labels = labels,   input_id = \"rank_list_swap\",   options = sortable_options(swap = TRUE) )  rank_list_multi <- rank_list(   text = \"You can select multiple items, then drag as a group\",   labels = labels,   input_id = \"rank_list_multi\",   options = sortable_options(multiDrag = TRUE) )    ui <- fluidPage(   fluidRow(     column(       width = 12,     tags$h2(\"Default, multi-drag and swapping behaviour\"),       tabsetPanel(         type = \"tabs\",         tabPanel(           \"Default\",             tags$b(\"Exercise\"),             rank_list_basic,             tags$b(\"Result\"),             verbatimTextOutput(\"results_basic\")         ),         tabPanel(           \"Multi-drag\",             tags$b(\"Exercise\"),             rank_list_multi,             tags$b(\"Result\"),             verbatimTextOutput(\"results_multi\")         ),         tabPanel(           \"Swap\",             tags$b(\"Exercise\"),             rank_list_swap,             tags$b(\"Result\"),             verbatimTextOutput(\"results_swap\")         )       )     )   ) )  server <- function(input, output, session) {   output$results_basic <- renderPrint({     input$rank_list_basic # This matches the input_id of the rank list   })   output$results_multi <- renderPrint({     input$rank_list_multi # This matches the input_id of the rank list   })   output$results_swap <- renderPrint({     input$rank_list_swap # This matches the input_id of the rank list   }) }  shinyApp(ui, server)"},{"path":[]},{"path":"https://rstudio.github.io/sortable/articles/built_in.html","id":"demo-1","dir":"Articles","previous_headings":"Bucket list","what":"Demo","title":"Using rank list and bucket lists in Shiny apps","text":"bucket list app, bucket list allows drag one bucket another.","code":""},{"path":"https://rstudio.github.io/sortable/articles/built_in.html","id":"source-code-1","dir":"Articles","previous_headings":"Bucket list","what":"Source code","title":"Using rank list and bucket lists in Shiny apps","text":"source code:","code":"## Example shiny app with bucket list  library(shiny) library(sortable)  ui <- fluidPage(   tags$head(     tags$style(HTML(\".bucket-list-container {min-height: 350px;}\"))   ),   fluidRow(     column(       tags$b(\"Exercise\"),       width = 12,       bucket_list(         header = \"Drag the items in any desired bucket\",         group_name = \"bucket_list_group\",         orientation = \"horizontal\",         add_rank_list(           text = \"Drag from here\",           labels = list(             \"one\",             \"two\",             \"three\",             htmltools::tags$div(               htmltools::em(\"Complex\"), \" html tag without a name\"             ),             \"five\" = htmltools::tags$div(               htmltools::em(\"Complex\"), \" html tag with name: 'five'\"             )           ),           input_id = \"rank_list_1\"         ),         add_rank_list(           text = \"to here\",           labels = NULL,           input_id = \"rank_list_2\"         )       )     )   ),   fluidRow(     column(       width = 12,       tags$b(\"Result\"),       column(         width = 12,          tags$p(\"input$rank_list_1\"),         verbatimTextOutput(\"results_1\"),          tags$p(\"input$rank_list_2\"),         verbatimTextOutput(\"results_2\"),          tags$p(\"input$bucket_list_group\"),         verbatimTextOutput(\"results_3\")       )     )   ) )  server <- function(input, output, session) {   output$results_1 <-     renderPrint(       input$rank_list_1 # This matches the input_id of the first rank list     )   output$results_2 <-     renderPrint(       input$rank_list_2 # This matches the input_id of the second rank list     )   output$results_3 <-     renderPrint(       input$bucket_list_group # Matches the group_name of the bucket list     )  }   shinyApp(ui, server)"},{"path":"https://rstudio.github.io/sortable/articles/cloning.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Cloning and removing elements","text":"Sometimes want ability drag item multiple times list, words ability “clone” items original list. may also want ability remove cloned items, possibly dragging “bin” “remove item” list.","code":""},{"path":"https://rstudio.github.io/sortable/articles/cloning.html","id":"cloning-an-element","dir":"Articles","previous_headings":"Introduction","what":"Cloning an element","title":"Cloning and removing elements","text":"clone element list, must add pull = \"clone\" option sortable_options argument::","code":"library(sortable) sortable_js(   \"sort1\",   options = sortable_options(     group = list(       pull = \"clone\",       name = \"sortGroup1\",       put = FALSE     ),     onSort = sortable_js_capture_input(\"sort_vars\")   ) )"},{"path":"https://rstudio.github.io/sortable/articles/cloning.html","id":"removing-an-element","dir":"Articles","previous_headings":"Introduction","what":"Removing an element","title":"Cloning and removing elements","text":"remove element dropped list, one option create “bin” area using JavaScript code: add JavaScript onAdd element sortable_options(). pass JavaScript code R, use htmlwidgets::JS() function:","code":"this.el.removeChild(evt.item); sortable_js(   \"sortable_bin\",   options = sortable_options(     group = list(       group = \"sortGroup1\",       put = TRUE,       pull = TRUE     ),     onAdd = htmlwidgets::JS(\"function (evt) { this.el.removeChild(evt.item); }\")   ) )"},{"path":"https://rstudio.github.io/sortable/articles/cloning.html","id":"full-example","dir":"Articles","previous_headings":"","what":"Full example","title":"Cloning and removing elements","text":"full code:","code":"## Example shiny app to demonstrate cloning and other sortable_options  library(shiny) library(htmlwidgets) library(sortable) library(magrittr)  icon_list <- function(x){   lapply(     x,     function(x) {       tags$div(         icon(\"arrows-alt-h\"),         tags$strong(x)       )     }   ) }   ui <- fluidPage(   fluidRow(     class = \"panel panel-heading\",     div(       class = \"panel-heading\",       h3(\"Illustration of sortable_options()\")     ),     fluidRow(       class = \"panel-body\",       column(         width = 4,         tags$div(           class = \"panel panel-default\",           tags$div(             class = \"panel-heading\",             icon(\"arrow-right\"),             \"Drag from here (items will clone)\"           ),           tags$div(             class = \"panel-body\",             id = \"sort1\",             icon_list(c(               \"A\",               \"B\",               \"C\",               \"D\",               \"E\"             ))           )         )       ),       column(         width = 4,         # analyse as x         tags$div(           class = \"panel panel-default\",           tags$div(             class = \"panel-heading\",             icon(\"exchange\"),             \"To here(max 3 items)\"           ),           tags$div(             class = \"panel-body\",             id = \"sort2\"           )         ),         # analyse as y         tags$div(           class = \"panel panel-default\",           tags$div(             class = \"panel-heading\",             icon(\"exchange\"),             \"Or here\"           ),           tags$div(             class = \"panel-body\",             id = \"sort3\"           )         )        ),       column(         width = 4,         # bin         tags$div(           class = \"panel panel-default\",           tags$div(             class = \"panel-heading\",             icon(\"trash\"),             \"Remove item\"           ),           tags$div(             class = \"panel-body\",             id = \"sortable_bin\"           )         )        )     )   ),   sortable_js(     \"sort1\",     options = sortable_options(       group = list(       pull = \"clone\",         name = \"sortGroup1\",         put = FALSE       ),       # swapClass = \"sortable-swap-highlight\",       onSort = sortable_js_capture_input(\"sort_vars\")     )   ),   sortable_js(     \"sort2\",     options = sortable_options(       group = list(         group = \"sortGroup1\",         put = htmlwidgets::JS(\"function (to) { return to.el.children.length < 3; }\"),         pull = TRUE       ),       swapClass = \"sortable-swap-highlight\",       onSort = sortable_js_capture_input(\"sort_x\")     )   ),   sortable_js(     \"sort3\",     options = sortable_options(       group = list(         group = \"sortGroup1\",         put = TRUE,         pull = TRUE       ),       swapClass = \"sortable-swap-highlight\",       onSort = sortable_js_capture_input(\"sort_y\")     )   ),   sortable_js(     \"sortable_bin\",     options = sortable_options(       group = list(         group = \"sortGroup1\",         put = TRUE,         pull = TRUE       ),       onAdd = htmlwidgets::JS(\"function (evt) { this.el.removeChild(evt.item); }\")     )   )  )  server <- function(input, output) {   output$variables <- renderPrint(input[[\"sort_vars\"]])   output$analyse_x <- renderPrint(input[[\"sort_x\"]])   output$analyse_y <- renderPrint(input[[\"sort_y\"]])     x <- reactive({     x <- input$sort_x     if (is.character(x)) x %>% trimws()   })    y <- reactive({     input$sort_y %>% trimws()   })  } shinyApp(ui, server)"},{"path":"https://rstudio.github.io/sortable/articles/novel_solutions.html","id":"creating-an-app","dir":"Articles","previous_headings":"","what":"Creating an app","title":"Novel solutions using sortable in shiny apps","text":"example demonstrates use custom sortable widgets shiny object.","code":""},{"path":"https://rstudio.github.io/sortable/articles/novel_solutions.html","id":"source-code","dir":"Articles","previous_headings":"","what":"Source code","title":"Novel solutions using sortable in shiny apps","text":"","code":"## Example shiny app to create a plot from sortable inputs  library(shiny) library(htmlwidgets) library(sortable) library(magrittr)  colnames_to_tags <- function(df){   lapply(     colnames(df),     function(co) {       tag(         \"p\",         list(           class = class(df[, co]),           tags$span(class = \"glyphicon glyphicon-move\"),           tags$strong(co)         )       )     }   ) }   ui <- fluidPage(   fluidRow(     class = \"panel panel-heading\",     div(       class = \"panel-heading\",       h3(\"Dragging variables to define a plot\")     ),     fluidRow(       class = \"panel-body\",       column(         width = 3,         tags$div(           class = \"panel panel-default\",           tags$div(class = \"panel-heading\", \"Variables\"),           tags$div(             class = \"panel-body\",             id = \"sort1\",             colnames_to_tags(mtcars)           )         )       ),       column(         width = 3,         # analyse as x         tags$div(           class = \"panel panel-default\",           tags$div(             class = \"panel-heading\",             tags$span(class = \"glyphicon glyphicon-stats\"),             \"Analyze as x (drag here)\"           ),           tags$div(             class = \"panel-body\",             id = \"sort2\"           )         ),         # analyse as y         tags$div(           class = \"panel panel-default\",           tags$div(             class = \"panel-heading\",             tags$span(class = \"glyphicon glyphicon-stats\"),             \"Analyze as y (drag here)\"           ),           tags$div(             class = \"panel-body\",             id = \"sort3\"           )         )        ),       column(         width = 6,         plotOutput(\"plot\")        )     )   ),   sortable_js(     \"sort1\",     options = sortable_options(       group = list(         name = \"sortGroup1\",         put = TRUE       ),       sort = FALSE,       onSort = sortable_js_capture_input(\"sort_vars\")     )   ),   sortable_js(     \"sort2\",     options = sortable_options(       group = list(         group = \"sortGroup1\",         put = htmlwidgets::JS(\"function (to) { return to.el.children.length < 1; }\"),         pull = TRUE       ),       onSort = sortable_js_capture_input(\"sort_x\")     )   ),   sortable_js(     \"sort3\",     options = sortable_options(       group = list(         group = \"sortGroup1\",         put = htmlwidgets::JS(\"function (to) { return to.el.children.length < 1; }\"),         pull = TRUE       ),       onSort = sortable_js_capture_input(\"sort_y\")     )   ) )  server <- function(input, output) {   output$variables <- renderPrint(input[[\"sort_vars\"]])   output$analyse_x <- renderPrint(input[[\"sort_x\"]])   output$analyse_y <- renderPrint(input[[\"sort_y\"]])     x <- reactive({     x <- input$sort_x     if (is.character(x)) x %>% trimws()   })    y <- reactive({     input$sort_y %>% trimws()   })    output$plot <-     renderPlot({       validate(         need(x(), \"Drag a variable to x\"),         need(y(), \"Drag a variable to y\")       )       dat <- mtcars[, c(x(), y())]       names(dat) <- c(\"x\", \"y\")       plot(y ~ x, data = dat, xlab = x(), ylab = y())     })  } shinyApp(ui, server)"},{"path":"https://rstudio.github.io/sortable/articles/understanding_sortable_js.html","id":"the-central-idea","dir":"Articles","previous_headings":"","what":"The central idea","title":"Understanding the interface to sortable.js","text":"key idea understand sortable, SortableJS particular, JavaScript manipulate HTML object based ’s CSS id. Using sortable markdown little tricky since markdown provide easy way provide id ’ll need. can overcome using bare HTML using htmltools::tags. Let’s make simple ul list. Note, however, sortable works nearly HTML element, div.","code":""},{"path":"https://rstudio.github.io/sortable/articles/understanding_sortable_js.html","id":"an-example-using-raw-html","dir":"Articles","previous_headings":"The central idea","what":"An example using raw HTML","title":"Understanding the interface to sortable.js","text":"following example uses HTML construct unordered list (<ul>), uses sortable_js() link JavaScript required create interactivity. Note: HTML id matches css_id argument sortable_js(). can drag drop list entries. Try ! can drag drop items order (try !): Move drag items different positions","code":"<p>You can drag and drop these items in any order (try it!):<\/p> <ul id = \"example01\">   <li>Move<\/li>   <li>Or drag<\/li>   <li>Each of the items<\/li>   <li>To different positions<\/li> <\/ul> ```{r} sortable_js(css_id = \"example01\") ```"},{"path":"https://rstudio.github.io/sortable/articles/understanding_sortable_js.html","id":"use-a-tag-list-to-achieve-the-same-but-from-r","dir":"Articles","previous_headings":"The central idea","what":"Use a tag list to achieve the same, but from R","title":"Understanding the interface to sortable.js","text":"can use functions tags() tagList(), htmltools package, create HTML. means can construct sortable list using: drag sort way like","code":"library(htmltools) tagList(   tags$ul(     id = \"example02\",     tags$li(\"drag me\"),     tags$li(\"sort me\"),     tags$li(\"any way you like\")   ),   sortable_js(\"example02\") )"},{"path":"https://rstudio.github.io/sortable/articles/understanding_sortable_js.html","id":"little-harder-but-better-example","dir":"Articles","previous_headings":"The central idea","what":"Little harder but better example","title":"Understanding the interface to sortable.js","text":"SortableJS functionality works HTML object, just lists. next example, can see drag drop images (<img>). embed plots page, can use base64::img() function encode png images format HTML understands. , notice HTML id matches css_id.","code":"library(base64enc) library(withr)  # create two plots for demo purposes pngfile_1 <- tempfile(fileext = \".png\") with_png(pngfile_1, width = 300, height = 200,{   plot(1:100, rnorm(100), pch = 21, bg = \"red\")   title(main = \"Moves Like Jagger\") })  pngfile_2 <- tempfile(fileext = \".png\") with_png(pngfile_2, width = 300, height = 200,{   barplot(1:9, col = blues9)   title(main = \"I Like the Way You Move\") }) tagList(   tags$div(     id = \"example03\",     tags$image(src = base64enc::dataURI(file = pngfile_1, mime = \"image/png\")),     tags$image(src = base64enc::dataURI(file = pngfile_2, mime = \"image/png\"))   ),   sortable_js(css_id = \"example03\") )"},{"path":"https://rstudio.github.io/sortable/articles/understanding_sortable_js.html","id":"the-power-of-groups","dir":"Articles","previous_headings":"","what":"The power of groups","title":"Understanding the interface to sortable.js","text":"Looking SortableJS excites potential use sortable important UI element Shiny non-Shiny context. potentially demo plot builder something like example. ’ll notice doesn’t really anything, hope intent direction clear.","code":"knitr::read_chunk(   system.file(\"shiny-examples/drag_vars_to_plot/app.R\", package = \"sortable\") )"},{"path":"https://rstudio.github.io/sortable/articles/understanding_sortable_js.html","id":"dragging-and-dropping-shiny-tabs","dir":"Articles","previous_headings":"","what":"Dragging and dropping shiny tabs","title":"Understanding the interface to sortable.js","text":"sortable JS library allows movable tabs inside Shiny (also Shiny) app. adding just one line code id RStudio Tabset example, get tabs user can re-arrange. can copy paste see , runGist(\"2dbe45f77b65e28acab9\"). modified code snippet : full code:","code":"# Show a tabset that includes a plot, summary, and table view # of the generated distribution mainPanel( tabsetPanel( type = \"tabs\", id = \"sortTab\", tabPanel(\"Plot\", plotOutput(\"plot\")), tabPanel(\"Summary\", verbatimTextOutput(\"summary\")), tabPanel(\"Table\", tableOutput(\"table\")) ) ) ), sortable_js(\"sortTab\") ## Example shiny app to drag-and-drop tabsets in a shiny app   # all credit for code goes to RStudio # https://github.com/rstudio/shiny-examples/tree/main/006-tabsets library(sortable) library(shiny)  ui = # Define UI for random distribution application   shinyUI(fluidPage(      # Application title     titlePanel(\"Tabsets\"),      # Sidebar with controls to select the random distribution type     # and number of observations to generate. Note the use of the     # br() element to introduce extra vertical spacing     sidebarLayout(       sidebarPanel(         radioButtons(           \"dist\", \"Distribution type:\",           c(             \"Normal\" = \"norm\",             \"Uniform\" = \"unif\",             \"Log-normal\" = \"lnorm\",             \"Exponential\" = \"exp\"           )         ),         br(),          sliderInput(           \"n\",           \"Number of observations:\",           value = 500,           min = 1,           max = 1000)       ),        # Show a tabset that includes a plot, summary, and table view       # of the generated distribution       mainPanel(         tabsetPanel(           type = \"tabs\",           id = \"sortTab\",           tabPanel(\"Plot\", plotOutput(\"plot\")),           tabPanel(\"Summary\", verbatimTextOutput(\"summary\")),           tabPanel(\"Table\", tableOutput(\"table\"))         )       )     ),     sortable_js(\"sortTab\")   ))  server = function(input, output) {    # Reactive expression to generate the requested distribution.   # This is called whenever the inputs change. The output   # functions defined below then all use the value computed from   # this expression   data <- reactive({     dist <- switch(       input$dist,       norm = rnorm,       unif = runif,       lnorm = rlnorm,       exp = rexp,       rnorm     )      dist(input$n)   })    # Generate a plot of the data. Also uses the inputs to build   # the plot label. Note that the dependencies on both the inputs   # and the data reactive expression are both tracked, and   # all expressions are called in the sequence implied by the   # dependency graph   output$plot <- renderPlot({     dist <- input$dist     n <- input$n      hist(data(),          main=paste('r', dist, '(', n, ')', sep=''))   })    # Generate a summary of the data   output$summary <- renderPrint({     summary(data())   })    # Generate an HTML table view of the data   output$table <- renderTable({     data.frame(x = data())   })  }  shinyApp( ui, server )"},{"path":"https://rstudio.github.io/sortable/articles/updating_rank_list.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Dynamically updating a rank_list element","text":"app demonstrates dynamically update rank_list()","code":""},{"path":"https://rstudio.github.io/sortable/articles/updating_rank_list.html","id":"full-example","dir":"Articles","previous_headings":"","what":"Full example","title":"Dynamically updating a rank_list element","text":"full code:","code":"## Example shiny app that dynamically updates a rank list  library(shiny) library(sortable)  ui <- fluidPage(   fluidRow(     column(       width = 4,       selectInput(\"data\", label = \"Select the data source\", choices = c(\"mtcars\", \"iris\")),       selectInput(\"nrow\", label = \"Number of rows\", choices = c(\"15\", \"50\", \"All\")),       uiOutput(\"sortable\")     ),     column(       width = 8,       h2(\"Results\"),       tableOutput(\"table\")     )   ) )  server <- function(input, output, session) {   rv <- reactiveValues(data = data.frame())    observeEvent(input$data, {     rv$data <- get(input$data)   })    observeEvent(input$sortable, {     rv$data <- rv$data[input$sortable]   })    output$sortable <- renderUI({     rank_list(\"Drag column names to change order\", names(rv$data), \"sortable\")   })    output$table <- renderTable({     if (input$nrow == \"All\") {       rv$data     } else {       head(rv$data, as.numeric(input$nrow))     }   }) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/sortable/articles/using_custom_css.html","id":"using-custom-styles","dir":"Articles","previous_headings":"","what":"Using custom styles","title":"Using custom styles with CSS","text":"Sometimes want take control styling app, e.g. changing colours sizes. functions rank_list() bucket_list() allows set custom CSS class, can define CSS rules modifies shiny app. default CSS style rank list default-sortable, can specify class modifying class argument. example, add custom-sortable CSS class, use: can use standard techniques Style apps CSS modify styling. example, modify custom-sortable class using shiny tag, use: app contains fully worked example turns background colours rank_list shades green:","code":"rank_list(   class = c(\"default-sortable\", \"custom-sortable\"), # add custom style   ... ) tags$style(   HTML(\"     .rank-list-container.custom-sortable {       background-color: #8A8;     }     .custom-sortable .rank-list-item {       background-color: #BDB;     }   \") )"},{"path":"https://rstudio.github.io/sortable/articles/using_custom_css.html","id":"source-code","dir":"Articles","previous_headings":"","what":"Source code","title":"Using custom styles with CSS","text":"","code":"## Example shiny app with custom css  library(shiny) library(sortable)  ui <- fluidPage(   fluidRow(     column(       width = 12,       tags$b(\"Exercise\"),       rank_list(         text = \"Drag the items in any desired order\",         labels = list(           \"one\",           \"two\",           \"three\",           \"four\",           \"five\"         ),         input_id = \"rank_list_1\",         class = c(\"default-sortable\", \"custom-sortable\") # add custom style       ),       tags$style(         HTML(\"           .rank-list-container.custom-sortable {             background-color: #8A8;           }           .custom-sortable .rank-list-item {             background-color: #BDB;           }         \")       ),       tags$b(\"Result\"),       verbatimTextOutput(\"results\")     )   ) )  server <- function(input, output) {   output$results <- renderPrint({     input$rank_list_1 # This matches the input_id of the rank list   }) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/sortable/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrie de Vries. Maintainer, author. Barret Schloerke. Author. Kenton Russell. Author, conceptor.            Original author RStudio. Copyright holder, funder. Lebedev Konstantin. Copyright holder.            'SortableJS', https://sortablejs.github.io/Sortable/","code":""},{"path":"https://rstudio.github.io/sortable/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Vries , Schloerke B, Russell K (2023). sortable: Drag--Drop 'shiny' Apps 'SortableJS'. R package version 0.5.0, https://rstudio.github.io/sortable/.","code":"@Manual{,   title = {sortable: Drag-and-Drop in 'shiny' Apps with 'SortableJS'},   author = {Andrie {de Vries} and Barret Schloerke and Kenton Russell},   year = {2023},   note = {R package version 0.5.0},   url = {https://rstudio.github.io/sortable/}, }"},{"path":"https://rstudio.github.io/sortable/index.html","id":"sortable-","dir":"","previous_headings":"","what":"Drag-and-Drop in shiny Apps with SortableJS","title":"Drag-and-Drop in shiny Apps with SortableJS","text":"sortable package enables drag--drop behaviour Shiny apps. exposing functionality SortableJS JavaScript library htmlwidget R, can use Shiny apps widgets, learnr tutorials well R Markdown. addition, provides custom learnr question type - question_rank() allows ranking questions drag--drop.","code":""},{"path":"https://rstudio.github.io/sortable/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Drag-and-Drop in shiny Apps with SortableJS","text":"can install released version sortable CRAN : development version GitHub :","code":"install.packages(\"sortable\") # install.packages(\"remotes\") remotes::install_github(\"rstudio/sortable\")"},{"path":[]},{"path":"https://rstudio.github.io/sortable/index.html","id":"rank-list","dir":"","previous_headings":"Examples","what":"Rank list","title":"Drag-and-Drop in shiny Apps with SortableJS","text":"can create drag--drop input object Shiny, using rank_list() function.","code":"## Example shiny app with rank list  library(shiny) library(sortable)  labels <- list(   \"one\",   \"two\",   \"three\",   htmltools::tags$div(     htmltools::em(\"Complex\"), \" html tag without a name\"   ),   \"five\" = htmltools::tags$div(     htmltools::em(\"Complex\"), \" html tag with name: 'five'\"   ) )  rank_list_basic <- rank_list(   text = \"Drag the items in any desired order\",   labels = labels,   input_id = \"rank_list_basic\" )  rank_list_swap <- rank_list(   text = \"Notice that dragging causes items to swap\",   labels = labels,   input_id = \"rank_list_swap\",   options = sortable_options(swap = TRUE) )  rank_list_multi <- rank_list(   text = \"You can select multiple items, then drag as a group\",   labels = labels,   input_id = \"rank_list_multi\",   options = sortable_options(multiDrag = TRUE) )    ui <- fluidPage(   fluidRow(     column(       width = 12,     tags$h2(\"Default, multi-drag and swapping behaviour\"),       tabsetPanel(         type = \"tabs\",         tabPanel(           \"Default\",             tags$b(\"Exercise\"),             actionButton(\"btnUpdate\", label = \"Update rank list title\"),             rank_list_basic,             tags$b(\"Result\"),             verbatimTextOutput(\"results_basic\")         ),         tabPanel(           \"Multi-drag\",             tags$b(\"Exercise\"),             rank_list_multi,             tags$b(\"Result\"),             verbatimTextOutput(\"results_multi\")         ),         tabPanel(           \"Swap\",             tags$b(\"Exercise\"),             rank_list_swap,             tags$b(\"Result\"),             verbatimTextOutput(\"results_swap\")         )       )     )   ) )  server <- function(input, output, session) {   output$results_basic <- renderPrint({     input$rank_list_basic # This matches the input_id of the rank list   })   output$results_multi <- renderPrint({     input$rank_list_multi # This matches the input_id of the rank list   })   output$results_swap <- renderPrint({     input$rank_list_swap # This matches the input_id of the rank list   })   # test updating the rank list label   observe({     update_rank_list(       \"rank_list_basic\",       text = paste(\"You pressed the button at\", as.character(Sys.time())),       session = session     )   }) %>%     bindEvent(input$btnUpdate) }  shinyApp(ui, server)"},{"path":"https://rstudio.github.io/sortable/index.html","id":"bucket-list","dir":"","previous_headings":"Examples","what":"Bucket list","title":"Drag-and-Drop in shiny Apps with SortableJS","text":"bucket list can one rank lists single object. can useful bucketing tasks, e.g. asking students classify objects multiple categories.","code":"## Example shiny app with bucket list  library(shiny) library(sortable)   ui <- fluidPage(   tags$head(     tags$style(HTML(\".bucket-list-container {min-height: 350px;}\"))   ),   fluidRow(     column(       tags$b(\"Exercise\"),       actionButton(\"btnUpdateBucket\", label = \"Update bucket list title\"),       actionButton(\"btnUpdateRank\", label = \"Update rank list title\"),       width = 12,       bucket_list(         header = \"Drag the items in any desired bucket\",         group_name = \"bucket_list_group\",         orientation = \"horizontal\",         add_rank_list(           text = \"Drag from here\",           labels = list(             \"one\",             \"two\",             \"three\",             htmltools::tags$div(               htmltools::em(\"Complex\"), \" html tag without a name\"             ),             \"five\" = htmltools::tags$div(               htmltools::em(\"Complex\"), \" html tag with name: 'five'\"             )           ),           input_id = \"rank_list_1\"         ),         add_rank_list(           text = \"to here\",           labels = NULL,           input_id = \"rank_list_2\"         )       )     )   ),   fluidRow(     column(       width = 12,       tags$b(\"Result\"),       column(         width = 12,          tags$p(\"input$rank_list_1\"),         verbatimTextOutput(\"results_1\"),          tags$p(\"input$rank_list_2\"),         verbatimTextOutput(\"results_2\"),          tags$p(\"input$bucket_list_group\"),         verbatimTextOutput(\"results_3\")       )     )   ) )  server <- function(input, output, session) {   output$results_1 <-     renderPrint(       input$rank_list_1 # This matches the input_id of the first rank list     )   output$results_2 <-     renderPrint(       input$rank_list_2 # This matches the input_id of the second rank list     )   output$results_3 <-     renderPrint(       input$bucket_list_group # Matches the group_name of the bucket list     )    # test updating the bucket list label   counter_bucket <- reactiveVal(1)   observe({     update_bucket_list(       \"bucket_list_group\",       text = paste(\"You pressed the button\", counter_bucket(), \"times\"),       session = session     )     counter_bucket(counter_bucket() + 1)   }) %>%     bindEvent(input$btnUpdateBucket)    # test updating the rank list label   counter_rank <- reactiveVal(1)   observe({     update_rank_list(       \"rank_list_1\",       text = paste(\"You pressed the button\", counter_rank(), \"times\"),       session = session     )     counter_rank(counter_rank() + 1)   }) %>%     bindEvent(input$btnUpdateRank) }   shinyApp(ui, server)"},{"path":"https://rstudio.github.io/sortable/index.html","id":"add-drag-and-drop-to-any-html-element","dir":"","previous_headings":"Examples","what":"Add drag-and-drop to any HTML element","title":"Drag-and-Drop in shiny Apps with SortableJS","text":"can also use sortable_js() drag drop widgets:","code":"library(DiagrammeR) library(htmltools)  html_print(tagList(   tags$p(\"You can drag and drop the diagrams to switch order:\"),   tags$div(     id = \"aUniqueId\",     tags$div(       style = \"border: solid 0.2em gray; float:left; margin: 5px\",       mermaid(\"graph LR; S[SortableJS] -->|sortable| R \",               height = 250, width = 300)     ),     tags$div(       style = \"border: solid 0.2em gray; float:left; margin: 5px\",       mermaid(\"graph TD; JavaScript -->|htmlwidgets| R \",               height = 250, width = 150)     )   ),   sortable_js(\"aUniqueId\") # the CSS id ))"},{"path":"https://rstudio.github.io/sortable/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Drag-and-Drop in shiny Apps with SortableJS","text":"learnt following related work starting sortable: esquisse package: “purpose add-let explore data quickly extract information hold. can create simple plots, won’t able use custom scales power ggplot2.” also shinyjqui package: “R wrapper jQuery UI javascript library. allows user easily add interactions animation effects shiny app.” shinyDND package: Adds functionality create drag drop div elements shiny.","code":""},{"path":"https://rstudio.github.io/sortable/reference/add_rank_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a rank list inside bucket list. — add_rank_list","title":"Add a rank list inside bucket list. — add_rank_list","text":"Since bucket_list can contain one rank_list, need easy way define contents individual rank list.  function serves specification rank list.","code":""},{"path":"https://rstudio.github.io/sortable/reference/add_rank_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a rank list inside bucket list. — add_rank_list","text":"","code":"add_rank_list(text, labels = NULL, input_id = NULL, css_id = input_id, ...)"},{"path":"https://rstudio.github.io/sortable/reference/add_rank_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a rank list inside bucket list. — add_rank_list","text":"text Text appear top list. labels character vector text display inside widget. can also list html tag elements.  text content label label name used set shiny input_id value. input_id output variable read plot/image . css_id css id use, must unique shiny app. defaults value input_id, appended value \"rank-list-container\", ensure CSS id unique container well labels. NULL, function generates id form rank_list_id_1, automatically increment every rank_list. ... arguments passed rank_list","code":""},{"path":"https://rstudio.github.io/sortable/reference/add_rank_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a rank list inside bucket list. — add_rank_list","text":"list class add_rank_list","code":""},{"path":[]},{"path":"https://rstudio.github.io/sortable/reference/bucket_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a bucket list. — bucket_list","title":"Create a bucket list. — bucket_list","text":"bucket list can contain one rank_list allows drag--drop items different lists.","code":""},{"path":"https://rstudio.github.io/sortable/reference/bucket_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bucket list. — bucket_list","text":"","code":"bucket_list(   header = NULL,   ...,   group_name,   css_id = group_name,   group_put_max = rep(Inf, length(labels)),   options = sortable_options(),   class = \"default-sortable\",   orientation = c(\"horizontal\", \"vertical\") )"},{"path":"https://rstudio.github.io/sortable/reference/bucket_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bucket list. — bucket_list","text":"header Text appears top bucket list.  (encoded HTML <p> tag, strictly speaking header.)  Note must explicitly provide header argument, especially case want header empty - use header = NULL header = NA. ... One specifications rank list, must defined add_rank_list. group_name Passed SortableJS group name. Also input value set Shiny. (input[[group_name]]) css_id css id use, must unique shiny app. defaults value group_id, appended value \"bucket-list-container\", ensure CSS id unique container well embedded rank lists. group_put_max yet implemented options Options supplied sortable_js object. See sortable_options details class css class applied bucket list rank lists.  can used define custom styling. orientation Either horizontal vertical, specifies layout components page.","code":""},{"path":"https://rstudio.github.io/sortable/reference/bucket_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bucket list. — bucket_list","text":"list class bucket_list","code":""},{"path":[]},{"path":"https://rstudio.github.io/sortable/reference/bucket_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bucket list. — bucket_list","text":"","code":"## -- example-bucket-list ---------------------------------------------  ## bucket list  if(interactive()) {   bucket_list(     header = \"This is a bucket list. You can drag items between the lists.\",     add_rank_list(       text = \"Drag from here\",       labels = c(\"a\", \"bb\", \"ccc\")     ),     add_rank_list(       text = \"to here\",       labels = NULL     )   ) }  ## bucket list with three columns  if(interactive()) {   bucket_list(     header = c(\"Sort these items into Letters and Numbers\"),     add_rank_list(       text = \"Drag from here\",       labels = sample(c(1:3, letters[1:2]))     ),     add_rank_list(       text = \"Letters\"     ),     add_rank_list(       text = \"Numbers\"     )   ) } ## Example of a shiny app if (interactive()) {   app <- system.file(     \"shiny-examples/bucket_list/app.R\",     package = \"sortable\"   )   shiny::runApp(app) }"},{"path":"https://rstudio.github.io/sortable/reference/chain_js_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Chain multiple JavaScript events — chain_js_events","title":"Chain multiple JavaScript events — chain_js_events","text":"SortableJS event based system.  able call multiple JavaScript events event execution, need executed one another.","code":""},{"path":"https://rstudio.github.io/sortable/reference/chain_js_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chain multiple JavaScript events — chain_js_events","text":"","code":"chain_js_events(...)"},{"path":"https://rstudio.github.io/sortable/reference/chain_js_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chain multiple JavaScript events — chain_js_events","text":"... JavaScript functions defined htmlwidgets::JS","code":""},{"path":"https://rstudio.github.io/sortable/reference/chain_js_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chain multiple JavaScript events — chain_js_events","text":"single JavaScript function call methods provided event","code":""},{"path":[]},{"path":"https://rstudio.github.io/sortable/reference/is_sortable_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is sortable options. — is_sortable_options","title":"Check if object is sortable options. — is_sortable_options","text":"Check object sortable options.","code":""},{"path":"https://rstudio.github.io/sortable/reference/is_sortable_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is sortable options. — is_sortable_options","text":"","code":"is_sortable_options(x)"},{"path":"https://rstudio.github.io/sortable/reference/is_sortable_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is sortable options. — is_sortable_options","text":"x Object test","code":""},{"path":"https://rstudio.github.io/sortable/reference/is_sortable_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is sortable options. — is_sortable_options","text":"Logical vector.  TRUE object inherits sortable_options","code":""},{"path":"https://rstudio.github.io/sortable/reference/is_sortable_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if object is sortable options. — is_sortable_options","text":"","code":"is_sortable_options(\"foo\") # returns FALSE #> [1] FALSE"},{"path":"https://rstudio.github.io/sortable/reference/question_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Ranking question for learnr tutorials. — question_rank","title":"Ranking question for learnr tutorials. — question_rank","text":"Add interactive ranking tasks learnr tutorials.  student can drag--drop answer options desired order.","code":""},{"path":"https://rstudio.github.io/sortable/reference/question_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ranking question for learnr tutorials. — question_rank","text":"","code":"question_rank(   text,   ...,   correct = \"Correct!\",   incorrect = \"Incorrect\",   loading = c(\"**Loading:** \", text, \"<br/><br/><br/>\"),   submit_button = \"Submit Answer\",   try_again_button = \"Try Again\",   allow_retry = FALSE,   random_answer_order = TRUE,   options = sortable_options() )"},{"path":"https://rstudio.github.io/sortable/reference/question_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ranking question for learnr tutorials. — question_rank","text":"text Question option text ... parameters passed onto learnr::question(). correct question, text print correct answer (defaults \"Correct!\"). answer, boolean indicating whether answer correct. incorrect Text print incorrect answer (defaults \"Incorrect\") allow_retry FALSE. loading Loading text display placeholder question loaded. provided, generic \"Loading...\" placeholder elements displayed. submit_button Label submit button. Defaults \"Submit Answer\" try_again_button Label try button. Defaults \"Submit Answer\" allow_retry Allow retry incorrect answers. Defaults FALSE. random_answer_order Display answers random order. options Options supplied sortable_js object. See sortable_options details","code":""},{"path":"https://rstudio.github.io/sortable/reference/question_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ranking question for learnr tutorials. — question_rank","text":"custom learnr question, type = sortable_rank. See learnr::question().","code":""},{"path":"https://rstudio.github.io/sortable/reference/question_rank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ranking question for learnr tutorials. — question_rank","text":"set answer options must contain set answer options. question completed, first correct answer displayed. Note , default, answer order randomized.","code":""},{"path":"https://rstudio.github.io/sortable/reference/question_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ranking question for learnr tutorials. — question_rank","text":"","code":"## Example of rank problem inside a learnr tutorial if (interactive()) {   learnr::run_tutorial(\"question_rank\", package = \"sortable\") }"},{"path":"https://rstudio.github.io/sortable/reference/rank_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ranking item list. — rank_list","title":"Create a ranking item list. — rank_list","text":"Creates ranking item list using SortableJS framework, generates htmlwidgets element.  elements list can dragged dropped order. can embed ranking question inside learnr tutorial, using question_rank(). embed rank_list inside shiny app, see Details section.","code":""},{"path":"https://rstudio.github.io/sortable/reference/rank_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ranking item list. — rank_list","text":"","code":"rank_list(   text = \"\",   labels,   input_id,   css_id = input_id,   options = sortable_options(),   orientation = c(\"vertical\", \"horizontal\"),   class = \"default-sortable\" )"},{"path":"https://rstudio.github.io/sortable/reference/rank_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ranking item list. — rank_list","text":"text Text appear top list. labels character vector text display inside widget. can also list html tag elements.  text content label label name used set shiny input_id value. input_id output variable read plot/image . css_id css id use, must unique shiny app. defaults value input_id, appended value \"rank-list-container\", ensure CSS id unique container well labels. NULL, function generates id form rank_list_id_1, automatically increment every rank_list. options Options supplied sortable_js object. See sortable_options details orientation Set \"horizontal\" get horizontal orientation items. class css class applied rank list.  can used define custom styling.","code":""},{"path":"https://rstudio.github.io/sortable/reference/rank_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a ranking item list. — rank_list","text":"can embed rank_list inside Shiny app, capture preferred ranking order user. widget automatically updates Shiny output, matching input_id.","code":""},{"path":[]},{"path":"https://rstudio.github.io/sortable/reference/rank_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a ranking item list. — rank_list","text":"","code":"## - example-rank-list ------------------------------------------------  if (interactive()) {   rank_list(     text = \"You can drag, drop and re-order these items:\",     labels = c(\"one\", \"two\", \"three\", \"four\", \"five\"),     input_id = \"example_2\"   ) } ## - example-rank-list-multidrag ------------------------------------------  if (interactive()) {   rank_list(     text = \"You can select multiple items and drag as a group:\",     labels = c(\"one\", \"two\", \"three\", \"four\", \"five\"),     input_id = \"example_2\",     options = sortable_options(       multiDrag = TRUE     )   ) } ## - example-rank-list-swap -----------------------------------------------  if (interactive()) {   rank_list(     text = \"You can re-order these items, and notice the swapping behaviour:\",     labels = c(\"one\", \"two\", \"three\", \"four\", \"five\"),     input_id = \"example_2\",     options = sortable_options(       swap = TRUE     )   ) } ## Example of a shiny app if (interactive()) {   app <- system.file(\"shiny-examples/rank_list/app.R\", package = \"sortable\")   shiny::runApp(app) }"},{"path":"https://rstudio.github.io/sortable/reference/render_sortable.html","id":null,"dir":"Reference","previous_headings":"","what":"Widget render function for use in Shiny. — render_sortable","title":"Widget render function for use in Shiny. — render_sortable","text":"Widget render function use Shiny.","code":""},{"path":"https://rstudio.github.io/sortable/reference/render_sortable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widget render function for use in Shiny. — render_sortable","text":"","code":"render_sortable(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://rstudio.github.io/sortable/reference/render_sortable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widget render function for use in Shiny. — render_sortable","text":"expr expression env environment evaluate expr. quoted expr quoted expression (quote())? useful want save expression variable.","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable.html","id":null,"dir":"Reference","previous_headings":"","what":"sortable: Drag-and-Drop in 'shiny' Apps with 'SortableJS' — sortable","title":"sortable: Drag-and-Drop in 'shiny' Apps with 'SortableJS' — sortable","text":"Enables drag--drop behaviour Shiny apps, exposing functionality 'SortableJS' https://sortablejs.github.io/Sortable/ JavaScript library 'htmlwidget'. can use Shiny apps widgets, 'learnr' tutorials well R Markdown. addition, provides custom 'learnr' question type - 'question_rank()' - allows ranking questions drag--drop.","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable.html","id":"a-new-html-widget","dir":"Reference","previous_headings":"","what":"A new html widget","title":"sortable: Drag-and-Drop in 'shiny' Apps with 'SortableJS' — sortable","text":"sortable_js() low-level function adds SortableJS widgets.","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable.html","id":"important-functions","dir":"Reference","previous_headings":"","what":"Important functions","title":"sortable: Drag-and-Drop in 'shiny' Apps with 'SortableJS' — sortable","text":"important functions package : rank_list() creates drag--drop, rank list bucket_list() lets add multiple rank_list objects columns","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable.html","id":"custom-question-types-for-learnr","dir":"Reference","previous_headings":"","what":"Custom question types for learnr","title":"sortable: Drag-and-Drop in 'shiny' Apps with 'SortableJS' — sortable","text":"can also use new question types learnr tutorials: question_rank()","code":""},{"path":[]},{"path":"https://rstudio.github.io/sortable/reference/sortable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sortable: Drag-and-Drop in 'shiny' Apps with 'SortableJS' — sortable","text":"Maintainer: Andrie de Vries apdevries@gmail.com Authors: Barret Schloerke barret@rstudio.com Kenton Russell kent.russell@timelyportfolio.com (Original author) [conceptor] contributors: RStudio [copyright holder, funder] Lebedev Konstantin ('SortableJS', https://sortablejs.github.io/Sortable/) [copyright holder]","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an htmlwidget with embedded 'SortableJS' library. — sortable_js","title":"Creates an htmlwidget with embedded 'SortableJS' library. — sortable_js","text":"Creates htmlwidget provides SortableJS use drag--drop interactivity Shiny apps R Markdown.","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an htmlwidget with embedded 'SortableJS' library. — sortable_js","text":"","code":"sortable_js(   css_id,   options = sortable_options(),   width = 0,   height = 0,   elementId = NULL,   preRenderHook = NULL )"},{"path":"https://rstudio.github.io/sortable/reference/sortable_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an htmlwidget with embedded 'SortableJS' library. — sortable_js","text":"css_id String css_id id apply SortableJS.  Note, sortable_js works html element, just ul/li. options Options supplied sortable_js object. See sortable_options details width Fixed width widget (css units). default NULL, results intelligent automatic sizing based widget's container. height Fixed height widget (css units). default NULL, results intelligent automatic sizing based widget's container. elementId Use explicit element ID widget (rather automatically generated one). Useful JavaScript needs explicitly discover interact specific widget instance. preRenderHook function run widget, just prior rendering. accepts entire widget object input, return modified widget object.","code":""},{"path":[]},{"path":"https://rstudio.github.io/sortable/reference/sortable_js.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an htmlwidget with embedded 'SortableJS' library. — sortable_js","text":"","code":"## -- example-sortable-js ------------------------------------------------- # Simple example of sortable_js. # Important: set the tags CSS `id` equal to the sortable_js `css_id`  if (interactive()) {   if (require(htmltools)) {     html_print(       tagList(         tags$p(\"You can drag and reorder the items in this list:\"),         tags$ul(           id = \"example_1\",           tags$li(\"Move\"),           tags$li(\"Or drag\"),           tags$li(\"Each of the items\"),           tags$li(\"To different positions\")         ),         sortable_js(css_id = \"example_1\")       )     )   } }"},{"path":"https://rstudio.github.io/sortable/reference/sortable_js_capture_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct JavaScript method to capture Shiny inputs on change. — sortable_js_capture_input","title":"Construct JavaScript method to capture Shiny inputs on change. — sortable_js_capture_input","text":"captures state sortable list.  look data-rank-id attribute first child element.  ? attribute exists particular item's first child, inner text used identifier.","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable_js_capture_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct JavaScript method to capture Shiny inputs on change. — sortable_js_capture_input","text":"","code":"sortable_js_capture_input(input_id)  sortable_js_capture_bucket_input(input_id, input_ids, css_ids)"},{"path":"https://rstudio.github.io/sortable/reference/sortable_js_capture_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct JavaScript method to capture Shiny inputs on change. — sortable_js_capture_input","text":"input_id Shiny input name set input_ids Set Shiny input ids set corresponding provided css_ids css_ids Set SortableJS css_id values help retrieve set object","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable_js_capture_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct JavaScript method to capture Shiny inputs on change. — sortable_js_capture_input","text":"character vector class JS_EVAL. See htmlwidgets::JS().","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable_js_capture_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct JavaScript method to capture Shiny inputs on change. — sortable_js_capture_input","text":"method used onSort option sortable_js. See sortable_options().","code":""},{"path":[]},{"path":"https://rstudio.github.io/sortable/reference/sortable_js_capture_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct JavaScript method to capture Shiny inputs on change. — sortable_js_capture_input","text":"","code":"## -- example-sortable-js-capture ----------------------------------------- # Simple example of sortable_js_capture. # Important: set the tags CSS `id` equal to the sortable_js `css_id`  if(interactive()) {   library(shiny)   library(sortable)    ui <- fluidPage(     div(       id = \"sortable\",       div(id = 1, `data-rank-id` = \"HELLO\", class = \"well\", \"Hello\"),       div(id = 2, `data-rank-id` = \"WORLD\", class = \"well\", \"world\")     ),     verbatimTextOutput(\"chosen\"),     sortable_js(       css_id = \"sortable\",       options = sortable_options(         onSort = sortable_js_capture_input(input_id = \"selected\")       )     )   )    server <- function(input, output){     output$chosen <- renderPrint(input$selected)   }    shinyApp(ui, server) }    ## ------------------------------------ # For an example, see the Shiny app at system.file(\"shiny-examples/drag_vars_to_plot/app.R\", package = \"sortable\") #> [1] \"/home/runner/work/_temp/Library/sortable/shiny-examples/drag_vars_to_plot/app.R\""},{"path":"https://rstudio.github.io/sortable/reference/sortable_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Define options to pass to a sortable object. — sortable_options","title":"Define options to pass to a sortable object. — sortable_options","text":"Use function define options sortable_js rank_list, pass turn SortableJS JavaScript library.","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define options to pass to a sortable object. — sortable_options","text":"","code":"sortable_options(   ...,   swap = NULL,   multiDrag = NULL,   group = NULL,   sort = NULL,   delay = NULL,   disabled = NULL,   animation = NULL,   handle = NULL,   filter = NULL,   draggable = NULL,   swapThreshold = NULL,   invertSwap = NULL,   direction = NULL,   scrollSensitivity = NULL,   scrollSpeed = NULL,   onStart = NULL,   onEnd = NULL,   onAdd = NULL,   onUpdate = NULL,   onSort = NULL,   onRemove = NULL,   onFilter = NULL,   onMove = NULL,   onLoad = NULL )"},{"path":"https://rstudio.github.io/sortable/reference/sortable_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define options to pass to a sortable object. — sortable_options","text":"... arguments passed onto SortableJS swap TRUE, modifies behaviour sortable allow items swapped rather sorted. dragging starts, user can drag items change elements. However, item user drops swapped originally dragged item. See also https://github.com/SortableJS/Sortable/tree/master/plugins/Swap multiDrag TRUE, allows selection multiple items within sortable , drag one item. placed, items unfold original order, beside new position. See also https://github.com/SortableJS/Sortable/wiki/Dragging-Multiple-Items--Sortable group drag elements one list another, lists must group value. See Sortable#group-option details. [\"name\"] sort Boolean allows sorting inside list. [TRUE] delay Time milliseconds define sorting start. [0] disabled Boolean disables sortable set true. [FALSE] animation Millisecond duration animation items sorting [0 (animation)] handle CSS selector used drag handle selector within list items. [\".-handle\"] filter CSS selector JS function used elements dragged. [\".ignore-elements\"] draggable CSS selector items inside element draggable. [\".item\"] swapThreshold Percentage target swap zone take , number 0 1. [1] invertSwap Set TRUE set swap zone sides target, effect sorting \"\" items. [FALSE] direction Direction sortable [\"horizontal\"] scrollSensitivity Number pixels mouse needs edge start scrolling. [30] scrollSpeed Number pixels speed scrolling. [10] onStart, onEnd JS function called element dragging starts ends onAdd JS function called element dropped list another list onUpdate JS function called sorting changed within list onSort JS function called change list (add / update / remove) onRemove JS function called element removed list another list onFilter JS function called attempt made drag filtered element onMove JS function called item moved list lists onLoad JS function dispatched \"next tick\" SortableJS initialized","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define options to pass to a sortable object. — sortable_options","text":"list class sortable_options","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define options to pass to a sortable object. — sortable_options","text":"Many SortableJS options accept JavaScript function. can using htmlwidgets::JS function.","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable_options.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Define options to pass to a sortable object. — sortable_options","text":"https://github.com/sortablejs/Sortable/","code":""},{"path":[]},{"path":"https://rstudio.github.io/sortable/reference/sortable_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define options to pass to a sortable object. — sortable_options","text":"","code":"sortable_options(sort = FALSE) #> $sort #> [1] FALSE #>  #> attr(,\"class\") #> [1] \"sortable_options\""},{"path":"https://rstudio.github.io/sortable/reference/sortable_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Widget output function for use in Shiny. — sortable_output","title":"Widget output function for use in Shiny. — sortable_output","text":"Widget output function use Shiny.","code":""},{"path":"https://rstudio.github.io/sortable/reference/sortable_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widget output function for use in Shiny. — sortable_output","text":"","code":"sortable_output(input_id, width = \"0px\", height = \"0px\")"},{"path":"https://rstudio.github.io/sortable/reference/sortable_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widget output function for use in Shiny. — sortable_output","text":"input_id output variable use sortable object width Fixed width widget (css units). default NULL, results intelligent automatic sizing based widget's container. height Fixed height widget (css units). default NULL, results intelligent automatic sizing based widget's container.","code":""},{"path":"https://rstudio.github.io/sortable/reference/update_bucket_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a bucket list. — update_bucket_list","title":"Change the value of a bucket list. — update_bucket_list","text":"moment, can update text bucket_list, labels.","code":""},{"path":"https://rstudio.github.io/sortable/reference/update_bucket_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a bucket list. — update_bucket_list","text":"","code":"update_bucket_list(   css_id,   header = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://rstudio.github.io/sortable/reference/update_bucket_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a bucket list. — update_bucket_list","text":"css_id css id use, must unique shiny app. defaults value group_id, appended value \"bucket-list-container\", ensure CSS id unique container well embedded rank lists. header Text appears top bucket list.  (encoded HTML <p> tag, strictly speaking header.)  Note must explicitly provide header argument, especially case want header empty - use header = NULL header = NA. session session object passed function given shinyServer.","code":""},{"path":[]},{"path":"https://rstudio.github.io/sortable/reference/update_bucket_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the value of a bucket list. — update_bucket_list","text":"","code":"## Example of a shiny app that updates a bucket list and rank list if (interactive()) {   app <- system.file(     \"shiny-examples/update/app.R\",     package = \"sortable\"   )   shiny::runApp(app) }"},{"path":"https://rstudio.github.io/sortable/reference/update_rank_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the value of a rank list. — update_rank_list","title":"Change the value of a rank list. — update_rank_list","text":"moment, can update text rank_list, labels.","code":""},{"path":"https://rstudio.github.io/sortable/reference/update_rank_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the value of a rank list. — update_rank_list","text":"","code":"update_rank_list(   css_id,   text = NULL,   session = shiny::getDefaultReactiveDomain() )"},{"path":"https://rstudio.github.io/sortable/reference/update_rank_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the value of a rank list. — update_rank_list","text":"css_id css id use, must unique shiny app. defaults value input_id, appended value \"rank-list-container\", ensure CSS id unique container well labels. NULL, function generates id form rank_list_id_1, automatically increment every rank_list. text Text appear top list. session session object passed function given shinyServer.","code":""},{"path":[]},{"path":[]},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"enhancements-0-5","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"sortable 0.5","text":"Add support update_rank_list() update_bucket_list() Add ability switch orientation rank_list() items horizontal. #92","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"changes-0-5","dir":"Changelog","previous_headings":"","what":"Changes","title":"sortable 0.5","text":"rank_list now unique CSS id, allow updating text container.","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"sortable-046","dir":"Changelog","previous_headings":"","what":"sortable 0.4.6","title":"sortable 0.4.6","text":"CRAN release: 2022-08-14","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"upgrade-sortablejs-0-4-6","dir":"Changelog","previous_headings":"","what":"Upgrade sortable.js","title":"sortable 0.4.6","text":"Include sortable.js version 1.15.0","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"sortable-045","dir":"Changelog","previous_headings":"","what":"sortable 0.4.5","title":"sortable 0.4.5","text":"CRAN release: 2021-12-13","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"upgrade-sortablejs-0-4-5","dir":"Changelog","previous_headings":"","what":"Upgrade sortable.js","title":"sortable 0.4.5","text":"Include sortable.js version 1.14.0, suggested #82 #73","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"bug-fixes-0-4-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"sortable 0.4.5","text":"Capture error bucket_list header empty #31 Fix rank-list-item spills outside container boundary #68 Allow bucket_list empty header, capture error better #69","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"other-changes-0-4-5","dir":"Changelog","previous_headings":"","what":"Other changes","title":"sortable 0.4.5","text":"Upgrade tests testthat version 3","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"sortable-044","dir":"Changelog","previous_headings":"","what":"sortable 0.4.4","title":"sortable 0.4.4","text":"CRAN release: 2020-09-17 functional changes release removes Suggests dependency lifecycle comply CRAN policy. lifecycle package used project.","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"sortable-043","dir":"Changelog","previous_headings":"","what":"sortable 0.4.3","title":"sortable 0.4.3","text":"CRAN release: 2020-08-26","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"breaking-changes-0-4-3","dir":"Changelog","previous_headings":"","what":"Breaking changes:","title":"sortable 0.4.3","text":"Moved ... dots argument sortable_options() first argument, previously last argument. prevent partial name matching resulting incorrect sortable option set.","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"other-0-4-3","dir":"Changelog","previous_headings":"","what":"Other:","title":"sortable 0.4.3","text":"Updated sortable.js version 1.10.2 Added examples using sortable.js plugins, specifically multiDrag swap. Added vignette cloning removing, contributed Maya Gans","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"sortable-042","dir":"Changelog","previous_headings":"","what":"sortable 0.4.2","title":"sortable 0.4.2","text":"CRAN release: 2019-12-01 First release accepted CRAN","code":""},{"path":"https://rstudio.github.io/sortable/news/index.html","id":"sortable-040","dir":"Changelog","previous_headings":"","what":"sortable 0.4.0","title":"sortable 0.4.0","text":"First candidate release CRAN","code":""}]
